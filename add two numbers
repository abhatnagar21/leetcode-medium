/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* l3=new ListNode();
        ListNode* head=l3;
         int carry=0;
        if(l1==NULL && l2==NULL)return NULL;
        while(l1 && l2)
        {
           
            int val=l1->val+l2->val+carry;
            carry=val/10;//carry is the quotient after divinf by 10
            l3->next= new ListNode(val%10);//inserting the remainder in the linklist
            l3=l3->next;
            l1=l1->next;
            l2=l2->next;
        }
// if anyone linklist is bigger than the other
while(l1)//if l1 is larger
        {
            
            int val=l1->val+carry;
            carry=val/10;
            l3->next= new ListNode(val%10);
            l3=l3->next;
            l1=l1->next;
        }
        while(l2)//if l2 is larger
        {
            
            int val=l2->val+carry;
            carry=val/10;
            l3->next= new ListNode(val%10);
            l3=l3->next;
            l2=l2->next;
        }
        if(carry)
        {
            l3->next= new ListNode(carry);
        }//if any carry still remains in the linklist
     return head->next;
    }
};
